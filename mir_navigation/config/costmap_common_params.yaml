# robot_base_frame: base_footprint
# transform_tolerance: 0.4
# update_frequency: 5.0
# publish_frequency: 1.0
# obstacle_range: 3.0
# #mark_threshold: 1
# publish_voxel_map: true
# navigation_map:
#   map_topic: /map
# obstacles:
#   observation_sources: b_scan_marking b_scan_clearing f_scan_marking f_scan_clearing
#   b_scan_marking:
#     topic: b_scan_rep117
#     data_type: LaserScan
#     clearing: false
#     marking: true
#     inf_is_valid: false
#     min_obstacle_height: 0.13
#     max_obstacle_height: 0.25
#   b_scan_clearing:
#     topic: b_scan_rep117
#     data_type: LaserScan
#     clearing: true
#     marking: false
#     inf_is_valid: false
#     min_obstacle_height: 0.13
#     max_obstacle_height: 0.25
#   f_scan_marking:
#     topic: f_scan_rep117
#     data_type: LaserScan
#     clearing: false
#     marking: true
#     inf_is_valid: false
#     min_obstacle_height: 0.13
#     max_obstacle_height: 0.25
#   f_scan_clearing:
#     topic: f_scan_rep117
#     data_type: LaserScan
#     clearing: true
#     marking: false
#     inf_is_valid: false
#     min_obstacle_height: 0.13
#     max_obstacle_height: 0.25
# virtual_walls_map:
#   map_topic: /virtual_walls/map
#   use_maximum: true

global_frame: map
robot_base_frame: base_footprint
obstacle_range: 2.5
raytrace_range: 3.0
footprint: [[-0.26, 0.27],[0.26,0.27],[0.26,-0.27],[-0.26,-0.27]]
# robot_radius: ir_of_robot
inflation_radius: 0.45

# uncomment to take in calculations of picco_flexx for the costmap.
# TODO: use unimplemented filter to take out noise
observation_sources: sick_tim #pico_flexx

sick_tim: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
# pico_flexx: {sensor_frame: pico_flexx_optical_frame, data_type: PointCloud2, topic: points, marking: true, clearing: true}